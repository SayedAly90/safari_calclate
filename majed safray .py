{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox, filedialog\n",
    "import json\n",
    "import csv\n",
    "from datetime import datetime\n",
    "\n",
    "class SafariCostCalculator:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"حاسبة تكاليف رحلات السفاري\")\n",
    "        self.root.geometry(\"900x700\")\n",
    "        self.root.configure(bg=\"#f5f5f5\")\n",
    "        \n",
    "        # ثوابت للحسابات\n",
    "        self.ENTRY_FEE_REGULAR = 100  # رسوم الدخول العادية\n",
    "        self.ENTRY_FEE_PEAK = 200     # رسوم الدخول في الموسم\n",
    "        self.SINGLE_ROOM_COST = 300   # تكلفة الغرفة الفردية\n",
    "        self.DOUBLE_ROOM_COST = 180   # تكلفة الغرفة المزدوجة\n",
    "        self.ORGANIZER_ROOM_COST = 150  # تكلفة غرفة المنظم\n",
    "        self.SAFARI_COST = 400        # تكلفة الرحلة الداخلية\n",
    "        self.CAR_RENTAL_COST = 170    # تكلفة إيجار السيارة يومياً\n",
    "        self.AIRPORT_TRANSFER_COST = 200  # تكلفة النقل من وإلى المطار\n",
    "        self.WATER_COST = 50          # تكلفة المياه\n",
    "        self.GIFT_COST = 10           # تكلفة الهدايا\n",
    "        self.MAX_PEOPLE_PER_CAR = 3   # الحد الأقصى للمشاركين في سيارة واحدة\n",
    "        \n",
    "        # متغيرات البرنامج\n",
    "        self.participants = []\n",
    "        self.is_peak_season = tk.BooleanVar(value=False)\n",
    "        self.current_participant_index = None\n",
    "        \n",
    "        # إنشاء الواجهة\n",
    "        self.create_widgets()\n",
    "    \n",
    "    def create_widgets(self):\n",
    "        # الإطار الرئيسي\n",
    "        main_frame = ttk.Frame(self.root, padding=\"10\")\n",
    "        main_frame.pack(expand=True, fill=\"both\")\n",
    "        \n",
    "        # إطار إضافة مشارك جديد\n",
    "        input_frame = ttk.LabelFrame(main_frame, text=\"بيانات المشارك\", padding=\"10\")\n",
    "        input_frame.pack(fill=\"x\", padx=10, pady=10)\n",
    "        \n",
    "        # الصف الأول من الإدخالات\n",
    "        row1 = ttk.Frame(input_frame)\n",
    "        row1.pack(fill=\"x\", pady=5)\n",
    "        \n",
    "        ttk.Label(row1, text=\"اسم المشارك:\").pack(side=\"right\", padx=5)\n",
    "        self.name_entry = ttk.Entry(row1, width=20)\n",
    "        self.name_entry.pack(side=\"right\", padx=5)\n",
    "        \n",
    "        ttk.Label(row1, text=\"نوع المشارك:\").pack(side=\"right\", padx=5)\n",
    "        self.is_organizer = tk.BooleanVar(value=False)\n",
    "        ttk.Checkbutton(row1, text=\"منظم\", variable=self.is_organizer).pack(side=\"right\", padx=5)\n",
    "        \n",
    "        # الصف الثاني من الإدخالات\n",
    "        row2 = ttk.Frame(input_frame)\n",
    "        row2.pack(fill=\"x\", pady=5)\n",
    "        \n",
    "        ttk.Label(row2, text=\"عدد الليالي:\").pack(side=\"right\", padx=5)\n",
    "        self.nights_values = [str(i) for i in range(1, 15)]\n",
    "        self.nights_combo = ttk.Combobox(row2, values=self.nights_values, width=5)\n",
    "        self.nights_combo.current(0)\n",
    "        self.nights_combo.pack(side=\"right\", padx=5)\n",
    "        \n",
    "        ttk.Label(row2, text=\"أيام استئجار السيارة:\").pack(side=\"right\", padx=5)\n",
    "        self.car_days_values = [str(i) for i in range(1, 15)]\n",
    "        self.car_days_combo = ttk.Combobox(row2, values=self.car_days_values, width=5)\n",
    "        self.car_days_combo.current(0)\n",
    "        self.car_days_combo.pack(side=\"right\", padx=5)\n",
    "        \n",
    "        # الصف الثالث من الإدخالات\n",
    "        row3 = ttk.Frame(input_frame)\n",
    "        row3.pack(fill=\"x\", pady=5)\n",
    "        \n",
    "        ttk.Label(row3, text=\"نوع الغرفة:\").pack(side=\"right\", padx=5)\n",
    "        self.room_type = tk.StringVar(value=\"زوجية\")\n",
    "        ttk.Radiobutton(row3, text=\"فردية\", variable=self.room_type, value=\"فردية\").pack(side=\"right\", padx=5)\n",
    "        ttk.Radiobutton(row3, text=\"زوجية\", variable=self.room_type, value=\"زوجية\").pack(side=\"right\", padx=5)\n",
    "        \n",
    "        ttk.Label(row3, text=\"سيارة:\").pack(side=\"right\", padx=5)\n",
    "        self.car_choice = tk.StringVar(value=\"مشاركة\")\n",
    "        ttk.Radiobutton(row3, text=\"خاصة\", variable=self.car_choice, value=\"خاصة\").pack(side=\"right\", padx=5)\n",
    "        ttk.Radiobutton(row3, text=\"مشاركة\", variable=self.car_choice, value=\"مشاركة\").pack(side=\"right\", padx=5)\n",
    "        \n",
    "        # عدد المشاركين في السيارة\n",
    "        ttk.Label(row3, text=\"عدد المشاركين في السيارة:\").pack(side=\"right\", padx=5)\n",
    "        self.car_sharing_values = [str(i) for i in range(1, self.MAX_PEOPLE_PER_CAR + 1)]\n",
    "        self.car_sharing_combo = ttk.Combobox(row3, values=self.car_sharing_values, width=3)\n",
    "        self.car_sharing_combo.current(0)  # افتراضي 1\n",
    "        self.car_sharing_combo.pack(side=\"right\", padx=5)\n",
    "        \n",
    "        ttk.Label(row3, text=\"الموسم:\").pack(side=\"right\", padx=5)\n",
    "        ttk.Checkbutton(row3, text=\"موسم الذروة\", variable=self.is_peak_season).pack(side=\"right\", padx=5)\n",
    "        \n",
    "        # أزرار الإضافة والتعديل والحذف\n",
    "        button_frame = ttk.Frame(input_frame)\n",
    "        button_frame.pack(fill=\"x\", pady=10)\n",
    "        \n",
    "        self.add_button = ttk.Button(button_frame, text=\"إضافة مشارك\", command=self.add_participant)\n",
    "        self.add_button.pack(side=\"right\", padx=5)\n",
    "        \n",
    "        self.update_button = ttk.Button(button_frame, text=\"تحديث بيانات\", command=self.update_participant, state=\"disabled\")\n",
    "        self.update_button.pack(side=\"right\", padx=5)\n",
    "        \n",
    "        self.delete_button = ttk.Button(button_frame, text=\"حذف مشارك\", command=self.delete_participant, state=\"disabled\")\n",
    "        self.delete_button.pack(side=\"right\", padx=5)\n",
    "        \n",
    "        self.calculate_button = ttk.Button(button_frame, text=\"حساب التكاليف\", command=self.calculate_all_costs)\n",
    "        self.calculate_button.pack(side=\"left\", padx=5)\n",
    "        \n",
    "        self.save_button = ttk.Button(button_frame, text=\"حفظ البيانات\", command=self.save_data)\n",
    "        self.save_button.pack(side=\"left\", padx=5)\n",
    "        \n",
    "        self.load_button = ttk.Button(button_frame, text=\"استيراد بيانات\", command=self.load_data)\n",
    "        self.load_button.pack(side=\"left\", padx=5)\n",
    "        \n",
    "        self.export_button = ttk.Button(button_frame, text=\"تصدير إلى Excel/CSV\", command=self.export_data)\n",
    "        self.export_button.pack(side=\"left\", padx=5)\n",
    "        \n",
    "        # جدول المشاركين\n",
    "        participant_frame = ttk.LabelFrame(main_frame, text=\"قائمة المشاركين\", padding=\"10\")\n",
    "        participant_frame.pack(fill=\"both\", expand=True, padx=10, pady=10)\n",
    "        \n",
    "        columns = (\"name\", \"nights\", \"car_days\", \"room_type\", \"car_choice\", \"car_sharing\", \"is_organizer\")\n",
    "        self.tree = ttk.Treeview(participant_frame, columns=columns, show=\"headings\")\n",
    "        \n",
    "        self.tree.heading(\"name\", text=\"الاسم\")\n",
    "        self.tree.heading(\"nights\", text=\"الليالي\")\n",
    "        self.tree.heading(\"car_days\", text=\"أيام السيارة\")\n",
    "        self.tree.heading(\"room_type\", text=\"نوع الغرفة\")\n",
    "        self.tree.heading(\"car_choice\", text=\"السيارة\")\n",
    "        self.tree.heading(\"car_sharing\", text=\"عدد المشاركين\")\n",
    "        self.tree.heading(\"is_organizer\", text=\"المنظم\")\n",
    "        \n",
    "        self.tree.column(\"name\", width=150)\n",
    "        self.tree.column(\"nights\", width=80)\n",
    "        self.tree.column(\"car_days\", width=80)\n",
    "        self.tree.column(\"room_type\", width=80)\n",
    "        self.tree.column(\"car_choice\", width=80)\n",
    "        self.tree.column(\"car_sharing\", width=80)\n",
    "        self.tree.column(\"is_organizer\", width=80)\n",
    "        \n",
    "        scrollbar = ttk.Scrollbar(participant_frame, orient=tk.VERTICAL, command=self.tree.yview)\n",
    "        self.tree.configure(yscroll=scrollbar.set)\n",
    "        \n",
    "        self.tree.pack(side=\"left\", fill=\"both\", expand=True)\n",
    "        scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "        \n",
    "        # ربط حدث تحديد صف في الجدول\n",
    "        self.tree.bind(\"<<TreeviewSelect>>\", self.on_participant_select)\n",
    "        \n",
    "        # إطار النتائج\n",
    "        results_frame = ttk.LabelFrame(main_frame, text=\"النتائج\", padding=\"10\")\n",
    "        results_frame.pack(fill=\"both\", expand=True, padx=10, pady=10)\n",
    "        \n",
    "        self.results_text = tk.Text(results_frame, wrap=tk.WORD, height=10)\n",
    "        self.results_text.pack(fill=\"both\", expand=True)\n",
    "    \n",
    "    def add_participant(self):\n",
    "        name = self.name_entry.get().strip()\n",
    "        if not name:\n",
    "            messagebox.showerror(\"خطأ\", \"الرجاء إدخال اسم المشارك\")\n",
    "            return\n",
    "        \n",
    "        # جمع البيانات\n",
    "        participant = {\n",
    "            \"name\": name,\n",
    "            \"nights\": int(self.nights_combo.get()),\n",
    "            \"car_days\": int(self.car_days_combo.get()),\n",
    "            \"room_type\": self.room_type.get(),\n",
    "            \"car_choice\": self.car_choice.get(),\n",
    "            \"car_sharing\": int(self.car_sharing_combo.get()),\n",
    "            \"is_organizer\": self.is_organizer.get()\n",
    "        }\n",
    "        \n",
    "        # إضافة إلى القائمة وتحديث الجدول\n",
    "        self.participants.append(participant)\n",
    "        self.update_participants_tree()\n",
    "        self.clear_inputs()\n",
    "    \n",
    "    def update_participant(self):\n",
    "        if self.current_participant_index is None:\n",
    "            return\n",
    "        \n",
    "        name = self.name_entry.get().strip()\n",
    "        if not name:\n",
    "            messagebox.showerror(\"خطأ\", \"الرجاء إدخال اسم المشارك\")\n",
    "            return\n",
    "        \n",
    "        # تحديث بيانات المشارك\n",
    "        self.participants[self.current_participant_index] = {\n",
    "            \"name\": name,\n",
    "            \"nights\": int(self.nights_combo.get()),\n",
    "            \"car_days\": int(self.car_days_combo.get()),\n",
    "            \"room_type\": self.room_type.get(),\n",
    "            \"car_choice\": self.car_choice.get(),\n",
    "            \"car_sharing\": int(self.car_sharing_combo.get()),\n",
    "            \"is_organizer\": self.is_organizer.get()\n",
    "        }\n",
    "        \n",
    "        # تحديث الجدول\n",
    "        self.update_participants_tree()\n",
    "        self.clear_inputs()\n",
    "        \n",
    "        # تعطيل أزرار التعديل والحذف\n",
    "        self.update_button.config(state=\"disabled\")\n",
    "        self.delete_button.config(state=\"disabled\")\n",
    "        self.add_button.config(state=\"normal\")\n",
    "        self.current_participant_index = None\n",
    "    \n",
    "    def delete_participant(self):\n",
    "        if self.current_participant_index is None:\n",
    "            return\n",
    "        \n",
    "        # حذف المشارك\n",
    "        del self.participants[self.current_participant_index]\n",
    "        \n",
    "        # تحديث الجدول\n",
    "        self.update_participants_tree()\n",
    "        self.clear_inputs()\n",
    "        \n",
    "        # تعطيل أزرار التعديل والحذف\n",
    "        self.update_button.config(state=\"disabled\")\n",
    "        self.delete_button.config(state=\"disabled\")\n",
    "        self.add_button.config(state=\"normal\")\n",
    "        self.current_participant_index = None\n",
    "    \n",
    "    def on_participant_select(self, event):\n",
    "        selected_items = self.tree.selection()\n",
    "        if not selected_items:\n",
    "            return\n",
    "        \n",
    "        item = selected_items[0]\n",
    "        index = int(self.tree.item(item, \"tags\")[0])\n",
    "        self.current_participant_index = index\n",
    "        \n",
    "        # عرض بيانات المشارك المحدد في نموذج الإدخال\n",
    "        participant = self.participants[index]\n",
    "        self.name_entry.delete(0, tk.END)\n",
    "        self.name_entry.insert(0, participant[\"name\"])\n",
    "        self.nights_combo.set(str(participant[\"nights\"]))\n",
    "        self.car_days_combo.set(str(participant[\"car_days\"]))\n",
    "        self.room_type.set(participant[\"room_type\"])\n",
    "        self.car_choice.set(participant[\"car_choice\"])\n",
    "        self.car_sharing_combo.set(str(participant[\"car_sharing\"]))\n",
    "        self.is_organizer.set(participant[\"is_organizer\"])\n",
    "        \n",
    "        # تفعيل أزرار التعديل والحذف\n",
    "        self.update_button.config(state=\"normal\")\n",
    "        self.delete_button.config(state=\"normal\")\n",
    "        self.add_button.config(state=\"disabled\")\n",
    "    \n",
    "    def clear_inputs(self):\n",
    "        self.name_entry.delete(0, tk.END)\n",
    "        self.nights_combo.current(0)\n",
    "        self.car_days_combo.current(0)\n",
    "        self.room_type.set(\"زوجية\")\n",
    "        self.car_choice.set(\"مشاركة\")\n",
    "        self.car_sharing_combo.current(0)\n",
    "        self.is_organizer.set(False)\n",
    "    \n",
    "    def update_participants_tree(self):\n",
    "        # حذف كل الصفوف\n",
    "        for item in self.tree.get_children():\n",
    "            self.tree.delete(item)\n",
    "        \n",
    "        # إضافة المشاركين\n",
    "        for i, participant in enumerate(self.participants):\n",
    "            organizer_status = \"نعم\" if participant[\"is_organizer\"] else \"لا\"\n",
    "            self.tree.insert(\"\", tk.END, values=(\n",
    "                participant[\"name\"],\n",
    "                participant[\"nights\"],\n",
    "                participant[\"car_days\"],\n",
    "                participant[\"room_type\"],\n",
    "                participant[\"car_choice\"],\n",
    "                participant[\"car_sharing\"],\n",
    "                organizer_status\n",
    "            ), tags=(str(i),))\n",
    "    \n",
    "    def calculate_all_costs(self):\n",
    "        if not self.participants:\n",
    "            messagebox.showinfo(\"تنبيه\", \"الرجاء إضافة مشاركين أولاً\")\n",
    "            return\n",
    "        \n",
    "        # إجمالي عدد المشاركين (باستثناء المنظم)\n",
    "        regular_participants = [p for p in self.participants if not p[\"is_organizer\"]]\n",
    "        total_regular_participants = len(regular_participants)\n",
    "        \n",
    "        # إجمالي جميع المشاركين\n",
    "        total_participants = len(self.participants)\n",
    "        \n",
    "        # احتساب التكاليف لكل مشارك\n",
    "        results = []\n",
    "        total_cost = 0\n",
    "        \n",
    "        for participant in self.participants:\n",
    "            cost_details = {}\n",
    "            \n",
    "            # رسوم الدخول\n",
    "            entry_fee = self.ENTRY_FEE_PEAK if self.is_peak_season.get() else self.ENTRY_FEE_REGULAR\n",
    "            \n",
    "            if participant[\"is_organizer\"]:\n",
    "                # المنظم يدفع فقط تكلفة الفندق والرحلة الداخلية\n",
    "                room_cost = self.ORGANIZER_ROOM_COST * participant[\"nights\"]\n",
    "                safari_cost = self.SAFARI_COST  # المنظم يدفع تكلفة الرحلة الداخلية\n",
    "                \n",
    "                # باقي التكاليف صفر للمنظم\n",
    "                entry_fee_cost = 0\n",
    "                car_rental_cost = 0\n",
    "                airport_transfer_cost = 0\n",
    "                water_cost = 0\n",
    "                gift_cost = 0\n",
    "            else:\n",
    "                # رسوم الإقامة حسب نوع الغرفة\n",
    "                if participant[\"room_type\"] == \"فردية\":\n",
    "                    room_cost = self.SINGLE_ROOM_COST * participant[\"nights\"]\n",
    "                else:  # زوجية\n",
    "                    room_cost = self.DOUBLE_ROOM_COST * participant[\"nights\"]\n",
    "                \n",
    "                # تكاليف رسوم الدخول\n",
    "                entry_fee_cost = entry_fee * participant[\"nights\"]\n",
    "                \n",
    "                # تكلفة الرحلة الداخلية\n",
    "                safari_cost = self.SAFARI_COST\n",
    "                \n",
    "                # تكلفة إيجار السيارة\n",
    "                if participant[\"car_choice\"] == \"خاصة\":\n",
    "                    car_rental_cost = self.CAR_RENTAL_COST * participant[\"car_days\"]\n",
    "                else:  # مشاركة\n",
    "                    # استخدام عدد المشاركين في السيارة من بيانات المشارك\n",
    "                    if participant[\"car_sharing\"] > 0:\n",
    "                        car_rental_cost = (self.CAR_RENTAL_COST * participant[\"car_days\"]) / participant[\"car_sharing\"]\n",
    "                    else:\n",
    "                        car_rental_cost = 0\n",
    "                \n",
    "                # تكلفة النقل من وإلى المطار - تقسم على المشاركين فقط (بدون المنظم)\n",
    "                airport_transfer_cost = self.AIRPORT_TRANSFER_COST / total_regular_participants if total_regular_participants > 0 else 0\n",
    "                \n",
    "                # تكلفة المياه (تقسم على عدد الليالي)\n",
    "                water_cost = self.WATER_COST / participant[\"nights\"] if participant[\"nights\"] > 0 else 0\n",
    "                \n",
    "                # تكلفة الهدايا\n",
    "                gift_cost = self.GIFT_COST\n",
    "            \n",
    "            # إجمالي التكلفة للمشارك\n",
    "            total_participant_cost = (\n",
    "                room_cost + entry_fee_cost + safari_cost + car_rental_cost + \n",
    "                airport_transfer_cost + water_cost + gift_cost\n",
    "            )\n",
    "            \n",
    "            # تجميع تفاصيل التكاليف\n",
    "            cost_details = {\n",
    "                \"name\": participant[\"name\"],\n",
    "                \"is_organizer\": participant[\"is_organizer\"],\n",
    "                \"room_cost\": room_cost,\n",
    "                \"entry_fee_cost\": entry_fee_cost,\n",
    "                \"safari_cost\": safari_cost,\n",
    "                \"car_rental_cost\": car_rental_cost,\n",
    "                \"airport_transfer_cost\": airport_transfer_cost,\n",
    "                \"water_cost\": water_cost,\n",
    "                \"gift_cost\": gift_cost,\n",
    "                \"total_cost\": total_participant_cost\n",
    "            }\n",
    "            \n",
    "            results.append(cost_details)\n",
    "            total_cost += total_participant_cost\n",
    "        \n",
    "        # عرض النتائج\n",
    "        self.display_results(results, total_cost, total_participants, total_regular_participants)\n",
    "    \n",
    "    def display_results(self, results, total_cost, total_participants, total_regular_participants):\n",
    "        self.results_text.delete(1.0, tk.END)\n",
    "        \n",
    "        # ترويسة\n",
    "        self.results_text.insert(tk.END, \"تقرير تكاليف رحلة السفاري\\n\")\n",
    "        self.results_text.insert(tk.END, \"=\" * 50 + \"\\n\\n\")\n",
    "        \n",
    "        # معلومات الرحلة\n",
    "        self.results_text.insert(tk.END, f\"إجمالي عدد المشاركين: {total_participants} (منهم {total_participants - total_regular_participants} منظم)\\n\")\n",
    "        season_type = \"موسم الذروة\" if self.is_peak_season.get() else \"الموسم العادي\"\n",
    "        self.results_text.insert(tk.END, f\"نوع الموسم: {season_type}\\n\\n\")\n",
    "        \n",
    "        # تفاصيل تكاليف كل مشارك\n",
    "        for i, cost_details in enumerate(results, 1):\n",
    "            participant_type = \"منظم\" if cost_details[\"is_organizer\"] else \"مشارك\"\n",
    "            self.results_text.insert(tk.END, f\"{i}. {cost_details['name']} ({participant_type})\\n\")\n",
    "            self.results_text.insert(tk.END, f\"   تكلفة الإقامة: {cost_details['room_cost']:.2f}\\n\")\n",
    "            \n",
    "            if cost_details[\"is_organizer\"]:\n",
    "                self.results_text.insert(tk.END, f\"   تكلفة الرحلة الداخلية: {cost_details['safari_cost']:.2f}\\n\")\n",
    "            else:\n",
    "                self.results_text.insert(tk.END, f\"   رسوم الدخول: {cost_details['entry_fee_cost']:.2f}\\n\")\n",
    "                self.results_text.insert(tk.END, f\"   تكلفة الرحلة الداخلية: {cost_details['safari_cost']:.2f}\\n\")\n",
    "                self.results_text.insert(tk.END, f\"   تكلفة إيجار السيارة: {cost_details['car_rental_cost']:.2f}\\n\")\n",
    "                self.results_text.insert(tk.END, f\"   تكلفة النقل من/إلى المطار: {cost_details['airport_transfer_cost']:.2f}\\n\")\n",
    "                self.results_text.insert(tk.END, f\"   تكلفة المياه: {cost_details['water_cost']:.2f}\\n\")\n",
    "                self.results_text.insert(tk.END, f\"   تكلفة الهدايا: {cost_details['gift_cost']:.2f}\\n\")\n",
    "            \n",
    "            self.results_text.insert(tk.END, f\"   إجمالي التكلفة: {cost_details['total_cost']:.2f}\\n\\n\")\n",
    "        \n",
    "        # إجمالي تكلفة الرحلة\n",
    "        self.results_text.insert(tk.END, \"=\" * 50 + \"\\n\")\n",
    "        self.results_text.insert(tk.END, f\"إجمالي تكلفة الرحلة: {total_cost:.2f}\\n\")\n",
    "        \n",
    "        # تاريخ الحساب\n",
    "        current_date = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "        self.results_text.insert(tk.END, f\"\\nتاريخ التقرير: {current_date}\")\n",
    "        \n",
    "        # حفظ النتائج للتصدير\n",
    "        self.cost_results = results\n",
    "    \n",
    "    def save_data(self):\n",
    "        if not self.participants:\n",
    "            messagebox.showinfo(\"تنبيه\", \"لا توجد بيانات للحفظ\")\n",
    "            return\n",
    "        \n",
    "        # حفظ البيانات في ملف\n",
    "        try:\n",
    "            data = {\n",
    "                \"participants\": self.participants,\n",
    "                \"is_peak_season\": self.is_peak_season.get(),\n",
    "                \"date\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
    "            }\n",
    "            \n",
    "            filename = f\"safari_trip_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json\"\n",
    "            with open(filename, \"w\", encoding=\"utf-8\") as f:\n",
    "                json.dump(data, f, ensure_ascii=False, indent=4)\n",
    "            \n",
    "            messagebox.showinfo(\"نجاح\", f\"تم حفظ البيانات في الملف: {filename}\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"خطأ\", f\"حدث خطأ أثناء حفظ البيانات: {str(e)}\")\n",
    "    \n",
    "    def load_data(self):\n",
    "        try:\n",
    "            filename = filedialog.askopenfilename(\n",
    "                title=\"اختر ملف البيانات\",\n",
    "                filetypes=[(\"ملفات JSON\", \"*.json\"), (\"جميع الملفات\", \"*.*\")]\n",
    "            )\n",
    "            \n",
    "            if not filename:\n",
    "                return\n",
    "            \n",
    "            with open(filename, \"r\", encoding=\"utf-8\") as f:\n",
    "                data = json.load(f)\n",
    "            \n",
    "            # تحميل البيانات\n",
    "            self.participants = data.get(\"participants\", [])\n",
    "            \n",
    "            # إضافة حقل عدد المشاركين في السيارة إذا لم يكن موجوداً\n",
    "            for participant in self.participants:\n",
    "                if \"car_sharing\" not in participant:\n",
    "                    participant[\"car_sharing\"] = 1\n",
    "            \n",
    "            self.is_peak_season.set(data.get(\"is_peak_season\", False))\n",
    "            \n",
    "            # تحديث الواجهة\n",
    "            self.update_participants_tree()\n",
    "            \n",
    "            messagebox.showinfo(\"نجاح\", \"تم تحميل البيانات بنجاح\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"خطأ\", f\"حدث خطأ أثناء تحميل البيانات: {str(e)}\")\n",
    "    \n",
    "    def export_data(self):\n",
    "        if not hasattr(self, \"cost_results\"):\n",
    "            messagebox.showinfo(\"تنبيه\", \"الرجاء حساب التكاليف أولاً قبل التصدير\")\n",
    "            return\n",
    "        \n",
    "        try:\n",
    "            filetypes = [(\"ملفات CSV\", \"*.csv\"), (\"جميع الملفات\", \"*.*\")]\n",
    "            filename = filedialog.asksaveasfilename(\n",
    "                defaultextension=\".csv\",\n",
    "                filetypes=filetypes,\n",
    "                title=\"حفظ التقرير\"\n",
    "            )\n",
    "            \n",
    "            if not filename:\n",
    "                return\n",
    "            \n",
    "            with open(filename, \"w\", newline=\"\", encoding=\"utf-8-sig\") as csvfile:\n",
    "                csv_writer = csv.writer(csvfile)\n",
    "                \n",
    "                # كتابة العناوين\n",
    "                headers = [\n",
    "                    \"الاسم\", \"نوع المشارك\", \"تكلفة الإقامة\", \"رسوم الدخول\", \n",
    "                    \"الرحلة الداخلية\", \"إيجار السيارة\", \"النقل من/إلى المطار\", \n",
    "                    \"تكلفة المياه\", \"تكلفة الهدايا\", \"إجمالي التكلفة\"\n",
    "                ]\n",
    "                csv_writer.writerow(headers)\n",
    "                \n",
    "                # كتابة البيانات\n",
    "                for cost in self.cost_results:\n",
    "                    participant_type = \"منظم\" if cost[\"is_organizer\"] else \"مشارك\"\n",
    "                    row = [\n",
    "                        cost[\"name\"], participant_type, round(cost[\"room_cost\"], 2),\n",
    "                        round(cost[\"entry_fee_cost\"], 2), round(cost[\"safari_cost\"], 2),\n",
    "                        round(cost[\"car_rental_cost\"], 2), round(cost[\"airport_transfer_cost\"], 2),\n",
    "                        round(cost[\"water_cost\"], 2), round(cost[\"gift_cost\"], 2),\n",
    "                        round(cost[\"total_cost\"], 2)\n",
    "                    ]\n",
    "                    csv_writer.writerow(row)\n",
    "                \n",
    "                # إضافة الإجمالي\n",
    "                total_cost = sum(cost[\"total_cost\"] for cost in self.cost_results)\n",
    "                csv_writer.writerow([])\n",
    "                csv_writer.writerow([\"إجمالي التكلفة\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", round(total_cost, 2)])\n",
    "            \n",
    "            messagebox.showinfo(\"نجاح\", f\"تم تصدير البيانات إلى: {filename}\")\n",
    "            \n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"خطأ\", f\"حدث خطأ أثناء تصدير البيانات: {str(e)}\")\n",
    "\n",
    "\n",
    "# تشغيل التطبيق\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = SafariCostCalculator(root)\n",
    "    root.mainloop() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "metadata": {
    "vscode": {
     "languageId": "markdown"
    }
   },
   "outputs": [],
   "source": [
    "To upload your Jupyter Notebook to GitHub, follow these steps:\n",
    "\n",
    "1. **Save Your Notebook**:\n",
    "    Ensure your Jupyter Notebook is saved with a `.ipynb` extension.\n",
    "\n",
    "2. **Initialize a Git Repository**:\n",
    "    Open a terminal or command prompt, navigate to the folder containing your notebook, and run:\n",
    "    ```bash\n",
    "    git init\n",
    "    ```\n",
    "\n",
    "3. **Add Your Notebook**:\n",
    "    Add your notebook to the repository:\n",
    "    ```bash\n",
    "    git add your_notebook_name.ipynb\n",
    "    ```\n",
    "\n",
    "4. **Commit Your Changes**:\n",
    "    Commit the notebook with a message:\n",
    "    ```bash\n",
    "    git commit -m \"Add Jupyter Notebook\"\n",
    "    ```\n",
    "\n",
    "5. **Create a Repository on GitHub**:\n",
    "    - Go to [GitHub](https://github.com).\n",
    "    - Click the \"+\" icon in the top-right corner and select \"New repository\".\n",
    "    - Fill in the repository name and other details, then click \"Create repository\".\n",
    "\n",
    "6. **Link Your Local Repository to GitHub**:\n",
    "    Copy the repository URL from GitHub and run:\n",
    "    ```bash\n",
    "    git remote add origin https://github.com/your_username/your_repository_name.git\n",
    "    ```\n",
    "\n",
    "7. **Push Your Notebook to GitHub**:\n",
    "    Push your notebook to the GitHub repository:\n",
    "    ```bash\n",
    "    git branch -M main\n",
    "    git push -u origin main\n",
    "    ```\n",
    "\n",
    "Your notebook should now be uploaded to GitHub. You can view it in your repository."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
